program ::= declaration*

declaration ::= function-definition
              | variable-declaration

function-definition ::= "fn" identifier "(" { function-argument ( "," function-argument )* } ")" "->" type compound-statement

variable-declaration ::= "let" identifier ":" type "=" expression ";"

compound-statement ::= "{" statement* "}

statement ::= compound-statement
            | declaration
            | expression ";"
            | "return" expression ";"
            | "while" expression compound-statement
            | "if" expression compound-statement { "else" compound-statement }

expression ::= "(" expression ")"
             | expression binary-operator expression
             | unary-operator expression
             | call
             | int-literal

binary-operator ::= "=" | "+" | "-" | "<<" | ">>" | "&" | "|" | "^" | "."
unary-operator ::= "+" | "-" | "~" | "++" | "--"

call ::= identifier "(" { expression ( "," expression )* } ")"

type ::= "void"
       | "u16"
       | "i16"
	   | "&" type

letter ::= "a" | "b" | ... | "z" | "A" | "B" | ... | "Z"

digit ::= "0" | "1" | ... | "9"

identifier ::= letter ( letter | digit | "_" )+

int-literal ::= digit+ { "b" | "o" | "d" | "h" }
